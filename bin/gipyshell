#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#

use strict;


$| = 1;


BEGIN
{
    # during tests

    push @INC, '../glue/swig/perl';

    # during distcheck

    push @INC, '../../glue/swig/perl';

    # after installation

    push @INC, '/usr/local/glue/swig/perl';
}


BEGIN
{
    # for main during tests

    push @INC, 'tests/glue/swig/perl';

    # for main during check

    push @INC, './glue/swig/perl';

    # for main during distcheck

    push @INC, '../../tests/glue/swig/perl';
}


use Getopt::Long;

#use Neurospaces;

use YAML;


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };


our $option_verbose;

my $exit_code = 0;


sub main
{
    read_cmd_line();

    system "mkdir --parents $ENV{HOME}/.genesis3/gipyshell/ipython_profile";

    if ($?)
    {
	die "$0: cannot create the necessary profile directories for correct execution of the gipyshell";
    }

#     if (not -d "$ENV{HOME}/.genesis3/gipyshell/ipython_profile/profile_genesis3")
    {
	system "cp -a /usr/local/neurospaces/gipyshell/ipython_profile/profile_genesis3/ $ENV{HOME}/.genesis3/gipyshell/ipython_profile";

	if ($?)
	{
	    die "$0: cannot create the necessary ipython profile for correct execution of the gipyshell";
	}
    }

    $ENV{NEUROSPACES_NMC_MODELS} = "/usr/local/neurospaces/models/library";

    my $ipython_version = `ipython -V`;

    if ($ipython_version =~ /^1/
	or $ipython_version =~ /^0\.12/
	or $ipython_version =~ /^0\.11/)
    {
	system "ipython --pylab --banner --pdb --i --profile genesis3 --ipython-dir $ENV{HOME}/.genesis3/gipyshell/ipython_profile " . (join ' ', map { "'$_'" } @ARGV);;
    }
    else
    {
	system "ipython -pylab -banner -pdb -i -profile genesis3 -ipythondir $ENV{HOME}/.genesis3/gipyshell/ipython_profile -c 'import sspy; import heccer; import model_container; g3 = sspy.SSPy(verbose=True); models = g3.CreateService(name=\"model\", type=\"model_container\", verbose=True)'" . (join ' ', map { "'$_'" } @ARGV);;
    }
}


sub read_cmd_line
{
    my $option_help;
    my $option_version;

    my $result
	= GetOptions
	    (
	     "help!" => \$option_help,
	     "v|verbose+" => \$option_verbose,
	     "version" => \$option_version,
	    );

    if ($option_version)
    {
	my $version = "not defined";

	print $version . "\n";

	exit 1;
    }

    if ($option_help)
    {
	print
	    "
$0 <options>

$0: configuration and versioning for this package.

options:
    --help               print usage information.
    --verbose            set verbosity level.
    --version            give version information.
";

	exit 1;
    }

}


main();


exit $exit_code;


